'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.diff = diff;

var _patch = require('./patch');

var _utils = require('./utils');

/**
 * Get the difference between two dom nodes
 * @param a an Element Node
 * @param b an Element Node
 *
 * @return a patch object
 */

function diff(a, b) {

    if (a.isEqualNode(b)) return diffProperties(a, b).concat(diffChildren(a, b));

    if (a.tagName !== b.tagName) return [new _patch.Patch(_patch.Patch.REPLACE, a, b)];

    return diffAttributes(a, b).concat(diffProperties(a, b)).concat(diffChildren(a, b));
}

// diff node attributes
function diffAttributes(a, b) {

    var patches = [];

    var aAttrs = (0, _utils.getAttributes)(a);
    var bAttrs = (0, _utils.getAttributes)(b);

    Object.keys(aAttrs).forEach(function (attr) {

        if (attr in bAttrs) {

            patches.push(new _patch.Patch(_patch.Patch.CHANGEATTRIBUTE, a, attr, bAttrs[attr]));

            delete bAttrs[attr];
        } else {

            patches.push(new _patch.Patch(_patch.Patch.REMOVEATTRIBUTE, a, attr));
        }

        delete aAttrs[attr];
    });

    Object.keys(bAttrs).forEach(function (attr) {

        patches.push(new _patch.Patch(_patch.Patch.ADDATTRIBUTE, a, attr, bAttrs[attr]));
    });

    return patches;
}

var PROPS = ['value', 'selected', 'checked', 'data'];

// diff properties
function diffProperties(a, b) {

    var patches = [];

    PROPS.forEach(function (prop) {

        var aProp = a[prop];
        var bProp = b[prop];

        if (aProp !== bProp) patches.push(new _patch.Patch(_patch.Patch.CHANGEPROPERTY, a, prop, bProp));
    });

    return patches;
}

function diffChildren(a, b) {

    var patches = [];

    var aChilds = (0, _utils.getChildNodes)(a);
    var bChilds = (0, _utils.getChildNodes)(b);
    var aRemaining = [].concat(aChilds);
    var bRemaining = [].concat(bChilds);

    // elements with ids are special
    aChilds.forEach(function (aChild, aI) {

        if (aChild.id && b.querySelector) {

            var similar = b.querySelector('#' + aChild.id);

            if (similar) {

                var index = (0, _utils.getNodeIndex)(similar);

                patches = patches.concat(diff(aChild, similar));

                if (index !== aI) {
                    patches.push(new _patch.Patch(_patch.Patch.INSERT, a, aChild, index));
                }

                (0, _utils.without)(aRemaining, aChild);
                (0, _utils.without)(bRemaining, bChilds[index]);
            }
        }
    });

    aRemaining.forEach(function (aChild, aI) {

        var bChild = bRemaining[aI];

        if (bChild === undefined) return patches.push(new _patch.Patch(_patch.Patch.REMOVE, aChild));

        patches = patches.concat(diff(aChild, bChild));

        (0, _utils.without)(bRemaining, bChild);
    });

    bRemaining.forEach(function (bChild) {

        patches.push(new _patch.Patch(_patch.Patch.INSERT, a, bChild, -1));
    });

    return patches;
}
//# sourceMappingURL=data:application/json;base64,