'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.patch = patch;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _utils = require('./utils');

/**
 * Patch Class
 *
 */

var Patch = function Patch(operation) {
    _classCallCheck(this, Patch);

    this.operation = operation;

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    this.args = args;
};

exports.Patch = Patch;

Patch.REMOVE = 'REMOVE';
Patch.REPLACE = 'REPLACE';
Patch.INSERT = 'INSERT';
Patch.ADDATTRIBUTE = 'ADDATTRIBUTE';
Patch.REMOVEATTRIBUTE = 'REMOVEATTRIBUTE';
Patch.CHANGEATTRIBUTE = 'CHANGEATTRIBUTE';
Patch.CHANGEPROPERTY = 'CHANGEPROPERTY';

/**
 * patch the dom
 *
 * @param patches
 */

function patch(patches) {

    sortInserts(patches).forEach(patchNode);
}

function sortInserts(patches) {

    return patches.sort(function (patchA, patchB) {

        if (patchA.operation === Patch.INSERT && patchB.operation === Patch.INSERT) {

            return patchA.args[1] - patchB.args[1];
        } else {

            return 0;
        }
    }).reverse();
}

function patchNode(_ref) {
    var operation = _ref.operation;
    var args = _ref.args;

    switch (operation) {

        case Patch.REMOVE:
            remove.apply(undefined, _toConsumableArray(args));
            break;

        case Patch.REPLACE:
            replace.apply(undefined, _toConsumableArray(args));
            break;

        case Patch.INSERT:
            insert.apply(undefined, _toConsumableArray(args));
            break;

        case Patch.ADDATTRIBUTE:
            setAttribute.apply(undefined, _toConsumableArray(args));
            break;

        case Patch.CHANGEATTRIBUTE:
            setAttribute.apply(undefined, _toConsumableArray(args));
            break;

        case Patch.REMOVEATTRIBUTE:
            removeAttribute.apply(undefined, _toConsumableArray(args));
            break;

        case Patch.CHANGEPROPERTY:
            changeProperty.apply(undefined, _toConsumableArray(args));
            break;
    }
}

function remove(node) {

    node.parentNode && node.parentNode.removeChild(node);
}

function replace(nodeA, nodeB) {

    node.parentNode && node.parentNode.replaceChild(nodeB, nodeA);
}

function insert(parent, node, index) {

    if (index !== -1) return parent && parent.removeChild(node) && parent.insertBefore(node, (0, _utils.getChildAtIndex)(parent, index));

    parent && parent.appendChild(node);
}

function setAttribute(node, attr, value) {

    node.setAttribute(attr, value);
}

function removeAttribute(node, attr) {

    node.removeAttribute(attr, value);
}

function changeProperty(node, prop, value) {

    node[prop] = value;
}
//# sourceMappingURL=data:application/json;base64,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QUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2pFOztBQUVELFNBQVMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDOztBQUVoQyxRQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsRUFDWCxPQUFPLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFdBakd2RSxlQUFlLEVBaUd3RSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFFM0csVUFBTSxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDdEM7O0FBRUQsU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUM7O0FBRXBDLFFBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2xDOztBQUVELFNBQVMsZUFBZSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUM7O0FBRWhDLFFBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3JDOztBQUVELFNBQVMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDOztBQUV0QyxRQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO0NBQ3RCIiwiZmlsZSI6InBhdGNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge2dldENoaWxkQXRJbmRleH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogUGF0Y2ggQ2xhc3NcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXRjaHtcblxuICAgIGNvbnN0cnVjdG9yKG9wZXJhdGlvbiwgLi4uYXJncyl7XG5cbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBvcGVyYXRpb247XG4gICAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgfVxufVxuXG5QYXRjaC5SRU1PVkUgPSAnUkVNT1ZFJztcblBhdGNoLlJFUExBQ0UgPSAnUkVQTEFDRSc7XG5QYXRjaC5JTlNFUlQgPSAnSU5TRVJUJztcblBhdGNoLkFEREFUVFJJQlVURSA9ICdBRERBVFRSSUJVVEUnO1xuUGF0Y2guUkVNT1ZFQVRUUklCVVRFID0gJ1JFTU9WRUFUVFJJQlVURSc7XG5QYXRjaC5DSEFOR0VBVFRSSUJVVEUgPSAnQ0hBTkdFQVRUUklCVVRFJztcblBhdGNoLkNIQU5HRVBST1BFUlRZID0gJ0NIQU5HRVBST1BFUlRZJztcblxuLyoqXG4gKiBwYXRjaCB0aGUgZG9tXG4gKlxuICogQHBhcmFtIHBhdGNoZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdGNoKHBhdGNoZXMpe1xuXG4gICAgc29ydEluc2VydHMocGF0Y2hlcykuZm9yRWFjaChwYXRjaE5vZGUpO1xufVxuXG5mdW5jdGlvbiBzb3J0SW5zZXJ0cyhwYXRjaGVzKXtcblxuICAgIHJldHVybiBwYXRjaGVzLnNvcnQoZnVuY3Rpb24ocGF0Y2hBLCBwYXRjaEIpe1xuXG4gICAgICAgIGlmKHBhdGNoQS5vcGVyYXRpb24gPT09IFBhdGNoLklOU0VSVCAmJiBwYXRjaEIub3BlcmF0aW9uID09PSBQYXRjaC5JTlNFUlQpe1xuXG4gICAgICAgICAgICByZXR1cm4gcGF0Y2hBLmFyZ3NbMV0gLSBwYXRjaEIuYXJnc1sxXTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH0pLnJldmVyc2UoKVxufVxuXG5cbmZ1bmN0aW9uIHBhdGNoTm9kZSh7b3BlcmF0aW9uLCBhcmdzfSl7XG5cbiAgICBzd2l0Y2gob3BlcmF0aW9uKXtcblxuICAgICAgICBjYXNlIFBhdGNoLlJFTU9WRTpcbiAgICAgICAgICAgIHJlbW92ZSguLi5hcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0Y2guUkVQTEFDRTpcbiAgICAgICAgICAgIHJlcGxhY2UoLi4uYXJncyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhdGNoLklOU0VSVDpcbiAgICAgICAgICAgIGluc2VydCguLi5hcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0Y2guQUREQVRUUklCVVRFOlxuICAgICAgICAgICAgc2V0QXR0cmlidXRlKC4uLmFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYXRjaC5DSEFOR0VBVFRSSUJVVEU6XG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGUoLi4uYXJncyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhdGNoLlJFTU9WRUFUVFJJQlVURTpcbiAgICAgICAgICAgIHJlbW92ZUF0dHJpYnV0ZSguLi5hcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGF0Y2guQ0hBTkdFUFJPUEVSVFk6XG4gICAgICAgICAgICBjaGFuZ2VQcm9wZXJ0eSguLi5hcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiByZW1vdmUobm9kZSl7XG5cbiAgICBub2RlLnBhcmVudE5vZGUgJiYgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlKG5vZGVBLCBub2RlQil7XG5cbiAgICBub2RlLnBhcmVudE5vZGUgJiYgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChub2RlQiwgbm9kZUEpO1xufVxuXG5mdW5jdGlvbiBpbnNlcnQocGFyZW50LCBub2RlLCBpbmRleCl7XG5cbiAgICBpZihpbmRleCAhPT0gLTEpXG4gICAgICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGUpICYmIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgZ2V0Q2hpbGRBdEluZGV4KHBhcmVudCwgaW5kZXgpKTtcblxuICAgIHBhcmVudCAmJiBwYXJlbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG59XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShub2RlLCBhdHRyLCB2YWx1ZSl7XG5cbiAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShub2RlLCBhdHRyKXtcblxuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHIsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gY2hhbmdlUHJvcGVydHkobm9kZSwgcHJvcCwgdmFsdWUpe1xuXG4gICAgbm9kZVtwcm9wXSA9IHZhbHVlO1xufSJdfQ==